# Domain
# 도메인 정보를 입력합니다. (nginx 안쓰면 안적어도 무방함)
HOST_NAME=

# Container Settings
# Docker 및 Container에 대한 전반적인 설정 부분입니다.
# TZ : 시간대 설정 ex) Asia/Seoul
# REPOLICY : restart옵션 - Container가 예기치 못하고 죽으면(종료되면) 어떻게 행동할건가? ex) always : 언제든 다시 실행해보죠~ (default : stop)
# PRIVILEGE : 커널 공유 옵션 - 실제 호스트 머신에서 커널을 공유하여서 수정 등의 행동이 가능한지 ex) false(권장)
# READ_ONLY : 컨테이너 내 파일 수정 가능 여부(※ DB컨테이너에 해두면 permmision deny로 에러 나오고. 골치아플 수도 있어여) 
TZ=
REPOLICY=
PRIVILEGE=
READ_ONLY=

# Mongo Settings
# MongoDB 관련 설정 부분입니다.
# MONGODB_IMAGE, MONGODB_IMAGE_TAG : Docker Image를 선택하는 부분입니다. (어떤 Mongo 이미지를 쓰고 어떤 버전을 쓸지)
# MONGO_USER, PASSWORD : MONGODB Administrator 값입니다.
MONGODB_IMAGE=
MONGODB_IMAGE_TAG=
MONGO_USER=
MONGO_PASSWORD=

# Mongo Express
# Mongo Express 설정 부분입니다. 간략하게 말하면 web을 통해서 MongoDB를 관리하는 앱입니다.
# ME_IMAGE_TAG, ME_MONGODB_SERVER : Docker Image를 선택하는 부분입니다. (어떤 Mongo Express 이미지를 쓰고 어떤 버전을 쓸지)
ME_IMAGE_TAG=
ME_MONGODB_SERVER=


# Nginx / App port
# Nginx 관련 부분입니다. (240926기준 아직 도입X)
HTTPS_PORT=
HTTP_PORT=

# Container Port
# 컨테이너 포트 매핑 부분입니다. yml파일엔 기본적으로 같은 포트로 매핑이 되어 있습니다.
# HOST Port:Container Port
MONGO_PORT=
MONGO_EX_PORT=
APP_PORT=

# volumens
# 볼륨 부분입니다.
# mkdir -p ./mongo/{data,logs,config,express}
MONGO_DB_PATH=./mongo/data/
MONGO_DB_LOG_PATH=./mongo/logs/
MONGO_DB_CONFIG_PATH=./mongo/config/
MONGO_EXPRESS_PATH=./mongo/express/

# Apply web
# app.py 부분에 admin ID/PW로 쓰입니다.
ADMIN_USERNAME=
ADMIN_PASSWORD=

# app.py의 object 및 log 경로입니다.
# mkdir -p ./app/{data,logs,config}
LOG_PATH=./app/log/access
OBJECT_PATH=./app/data